<template>
  <view class="container">
    <!--#ifndef APP-PLUS -->
    <u-empty
      text="请前往App平台进行推流"
      icon="https://live-cdn.xgpax.top/common/no_content.png"
    ></u-empty>
    <!--#endif -->
    <!--#ifdef APP-PLUS -->
    <view>
      <live-pusher
        id="livePusher"
        :url="url"
        style="height: 800px"
        @netstatus="handleNetStatusChange"
        :beauty="beauty"
        :whiteness="whiteness"
      ></live-pusher>

      <view class="info-container">
        <describe :data="liveInfo"></describe>
      </view>

      <view class="tool-container">
        <view class="tool-container-config">
          <view class="tool-container-config-item">
            <text class="label">美颜：</text>
            <u-slider
              v-model="beauty"
              min="0"
              max="10"
              activeColor="#3c9cff"
              inactiveColor="#c0c4cc"
            >
            </u-slider>
          </view>
          <view class="tool-container-config-item">
            <text class="label">美白：</text>
            <u-slider
              v-model="whiteness"
              min="0"
              max="10"
              activeColor="#3c9cff"
              inactiveColor="#c0c4cc"
            >
            </u-slider>
          </view>
        </view>
        <view class="tool-container-btn">
          <u-button
            @click="handleStartClick"
            type="primary"
            :text="btnText"
          ></u-button>
          <u-button
            @click="tempStop"
            type="primary"
            text="暂停直播"
            :disabled="!isLiving"
          ></u-button>
          <u-button @click="startPreview" type="primary" text="开启预览">
          </u-button>
        </view>
      </view>
    </view>
    <!--#endif -->
  </view>
</template>

<script lang="js">
import { getLiveDetail, changeLiveStatus } from '@/api';
import describe from '@/components/describe.vue';
export default {
  // #ifdef APP-PLUS
  data() {
    return {
      url: '',
      context: null,
      isLiving: false,
      liveId: '',
      isPause: false,
      liveInfo: [],
      beauty: 3,
      whiteness: 5,
    };
  },
  components: {
    describe
  },
  computed: {
    btnText() {
      if(this.isPause){
        return '继续直播';
      }
      return this.isLiving ?  '结束直播': '开始直播';
    },
  },
  methods: {
    async handleStartClick(){
      return this.isLiving ? await this.stopLive() : await this.startLive();
    },
    initLivePlayerContext(){
      if(!this.context){
        this.context = uni.createLivePusherContext("livePusher", this);
        this.startPreview();
      }
    },
    tempStop(){
        uni.showModal({
          title: "暂停直播",
          content: "暂停直播后，在预定时间到期前可继续直播",
          success: ({ confirm }) => {
            if (confirm) {
              this.changeCurrentLiveStatus(0);
              this.context.pause({
                success: () => {
                  this.isPause = true;
                  this.isLiving = false;
                },
              });
            }
          },
        });
    },
    startPreview(){
      if(this.context){
        this.context.stopPreview();
        this.context.startPreview();
      }
    },
    async startLive() {
     this.changeCurrentLiveStatus(1);
     return new Promise((resolve, reject) => {
        if(this.isPause){
          this.context.resume({
            success: () => {
              this.isPause = false;
              this.isLiving = true;
              resolve(true);
              return;
            },
          });
        }
        this.context.start({
          success: () => {
            this.isLiving = true;
            resolve(true);
          },
          fail: (err) => {
            reject(false);
          }
        });
      });
    },
    async changeCurrentLiveStatus(status){
      const result = await changeLiveStatus({
        status,
        liveId: this.liveId,
      })
    },
    async stopCurrentLive(){
      return new Promise((resolve, reject) => {
        this.context.stop({
          success: () => {
            resolve(false);
            this.isLiving = false;
          },
          fail: (err) => {
            reject(true);
          }
        });
      });
    },
    async stopLive() {
      uni.showModal({
        title: "退出直播",
        content: "结束直播将无法回到本场直播?",
        success:  ({ confirm }) => {
          if (confirm) {
            this.changeCurrentLiveStatus(2);
            uni.showToast({
              title: "退出直播成功",
              icon: "success",
            });
            this.stopCurrentLive();
            setTimeout(function() {
              uni.navigateBack();
            }, 500);
          }
        },
    });
    },
    handleNetStatusChange(e){
      const { detail, timeStamp } = e;
      const { info } = detail;
      this.liveInfo =
      [
        {
          key: '视频比特率',
          value: `${info.videoBitrate}kb/s`,
        },
        {
          key: '音频比特率',
          value: `${info.audioBitrate}kb/s`,
        },
        {
          key:  '视频帧率',
          value: `${info.videoFPS}fps`
        },
        {
          key: '网络速度',
          value: `${Math.round(info.netSpeed / 8)}kB/s`
        }
      ]
    }
  },
  async onLoad({liveId}){
    try{
      const liveDetailResponse = await getLiveDetail({ liveId });
      const { data } = liveDetailResponse;
      const { rtmp } = data.pushUrl;
      console.log(data);
      this.liveId = liveId;
      this.url = rtmp;
      // 演示创建直播实例
      setTimeout(()=>{
        this.initLivePlayerContext();
      }, 500);
      uni.setNavigationBarTitle({
        title: data.detail.title,
      });
    }catch(e){
      //TODO handle the exception
      console.error(e);
    }
  },
  // 控制离开app
  onHide(){
    if(!this.isPause && this.isLiving){
      this.context.pause();
      this.isPause = true;
    }
  },
  onShow(){
    if(this.isPause && this.isLiving){
      this.context.resume();
      this.isPause = false;
    }
  }
  // #endif
};
</script>

<style scoped lang="scss">
.container {
  .tool-container {
    position: absolute;
    width: 400px;
    bottom: 40;
    &-btn {
      @extend .flex-row;
      justify-content: space-around;
      margin-top: 12rpx;
    }
  }
  .label {
    color: #fff;
    margin-left: 16px;
    font-size: 18px;
    font-weight: 600;
  }
  .info-container {
    position: absolute;
    width: 200px;
    right: 0;
  }
}
</style>
