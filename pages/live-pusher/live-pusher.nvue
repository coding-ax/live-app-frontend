<template>
  <view class="container">
    <live-pusher
      id="livePusher"
      :url="url"
      :enable-camera="enableCamera"
      mode="FHD"
      style="height: 800px"
    ></live-pusher>
    <view class="tool-container">
      <u-button
        @click="handleStartClick"
        type="primary"
        :text="btnText"
      ></u-button>
      <u-button
        @click="tempStop"
        type="primary"
        text="暂停直播"
        :disabled="!isLiving"
      ></u-button>
      <u-button @click="startPreview" type="primary" text="开启预览">
      </u-button>
    </view>
  </view>
</template>

<script lang="js">
import { getLiveDetail, changeLiveStatus } from '@/api';
export default {
  data() {
    return {
      url: "rtmp://live.xgpax.top/live/123",
      enableCamera: true,
      context: null,
      isLiving: false,
      liveId: '',
    };
  },
  computed: {
    btnText() {
      return this.isLiving ?  '结束直播': '开始直播';
    },
  },
  methods: {
    async handleStartClick(){
      const result = this.isLiving ? await this.stopLive() : await this.startLive();
      this.startPreview();
    },
    initLivePlayerContext(){
        this.context = uni.createLivePusherContext("livePusher", this);
    },
    tempStop(){
        uni.showModal({
          title: "暂停直播",
          content: "暂停直播后，在预定时间到期前可继续直播",
          success: ({ confirm }) => {
            if (confirm) {
              this.changeCurrentLiveStatus(0);
              this.isLiving = false;
              this.stopCurrentLive();
              this.startPreview();
            }
          },
        });
    },
    startPreview(){
      if(this.context){
        this.context.startPreview();
      }
    },
    async startLive() {
     this.changeCurrentLiveStatus(1);
     return new Promise((resolve, reject) => {
        this.context.start({
          success: () => {
            this.isLiving = true;
            resolve(true);
          },
          fail: (err) => {
            reject(false);
          }
        });
      });
    },
    async changeCurrentLiveStatus(status){
      const result = await changeLiveStatus({
        status,
        liveId: this.liveId,
      })
    },
    async stopCurrentLive(){
      return new Promise((resolve, reject) => {
        this.context.stop({
          success: () => {
            resolve(false);
            this.isLiving = false;
          },
          fail: (err) => {
            reject(true);
          }
        });
      });
    },
    async stopLive() {
      uni.showModal({
        title: "退出直播",
        content: "结束直播将无法回到本场直播?",
        success:  ({ confirm }) => {
          if (confirm) {
            this.changeCurrentLiveStatus(2);
            uni.showToast({
              title: "退出直播成功",
              icon: "success",
            });
            setTimeout(function() {
              uni.navigateBack();
            }, 1000);
            this.stopCurrentLive();
          }
        },
    });
    },
  },
  mounted() {
	  if(!this.context){
		 this.initLivePlayerContext();
	  }
    this.startPreview(); // 摄像头预览 （不加会黑屏）
  },
  async onLoad({liveId}){
    try{
      const liveDetailResponse = await getLiveDetail({ liveId });
      const { data } = liveDetailResponse;
      const { rtmp } = data.pushUrl;
      console.log(rtmp);
      this.liveId = liveId;
      this.url = rtmp;
      this.initLivePlayerContext();
      uni.setNavigationBarTitle({
        title: data.detail.title,
      });
    }catch(e){
      //TODO handle the exception
      console.error(e);
    }
  }
};
</script>

<style scoped lang="scss">
.container {
  .tool-container {
    @extend .flex-row;
    justify-content: space-around;
    margin-top: 12rpx;
    position: absolute;
    width: 400px;
    height: 45px;
    bottom: 40;
  }
}
</style>
